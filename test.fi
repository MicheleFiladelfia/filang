#fibonacci
fn fib(n : (n == 0)) = 0;
fn fib(n : (n == 1)) = 1;
fn fib(n) = fib(n - 1) + fib(n - 2);

#you can return function and specify needed type by parameter
fn pow(e = 2){
    fn f(n : Number) = {
    	return n ^ exponent;
    }
    
    return f;
}

#logical expression in function parameters
fn divide(a, Number b : (b != 0)){
    return a / b;
}


#structure definition
struct Point{
    var x;
    var y;

    fn init(Number x, Number y){
        self.x = x;
        self.y = y;
    }

    fn stringify(){
        print "x = " + self.x + ", y = " + self.y;
    }
}


#linked list implementation
struct Node{
    var value;
    var next;

    fn init(value = 0, next = nil){
        self.value = value;
        self.next = next;
    }
}

struct LinkedList{
    var head;
    var tail;
    var size;

    fn init(){
        self.head = Node();
        self.tail = Node();
        self.size = 0;
    }

    fn add(value){
        var node = Node(value, self.tail);
        if(self.size == 0){
            self.head = node;
        }
        self.tail = node;
        self.size++;
    }

    fn removeLast(){
        if(self.size == 0){
            return;
        }
        var node = self.head;
        self.head = node.next;
        self.size--;
        return node.value;
    }

    fn stringify(node = self.head){
        if(node == self.tail){
            return node.value;
        }
        return node.value + ", " + self.stringify(node.next);
    }
}

fn main(){
    var x = 10;
    print fib(x); #55
    
    var square = pow();
    print square(5); #25
    
    print divide(4,2); #2
    
    print divide(4,0); #Error, no function divide(a,0) is defined

    var p = Point(1,2);
    print p.stringify(); #x = 1, y = 2
}

